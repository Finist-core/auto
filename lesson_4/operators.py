#операторы присвоения
# += -= /= *= **=
a = 1

a = a + 1
#the same
a += 1
#прибавляет 1 к переменной a , так же как и a = a + 1


#операторы принадлежности
# in, not in  возвращает булевое значение
text = "I love python"
print("love" in text)
print("Love" in text)
"""проверяют, являются ли сравнивыемые значения представителями одного и того же участка
 памяти симтемы Для чисел от 0 до 256 участки памяти зарезервированы, поэтому при 
помещении в переменную такого числа (0-256) в переменную помещается не само число, 
а ссылка на него и память для этого числа не выделяется. Эти числа всегда хранятся
в системе по одному адресу. Но если внести в переменную число больше 256, то под 
это число выделяется память и в переменную сохраняется ссылка на эту ячейку памяти. 
Если создать ещё одну ячейку с таким же значением, по нее будет выделана память и в
переменную будет сохранена ссылка на новую ячейку памяти. Таким образом, операторы
идентичности проверяют, что сравниваемые объекты представляют собой одну и туже ячейку
памяти. То есть, если сравнить 257 и 257, то ответ будет False"""

a = 2570
b = 3
c = 2570

print(id(a))
print(id(b))
print(id(c))

if a == c:
    print(1)
else:
    print(2)

#Распечатает идентификатор ячейки памяти, где хранится переменная

print(a is c)
print(a is not b)